<1교시>
파일 첨부 기능 + 답변글 + 페이징기법

페이징
-> 데이터 베이스에 글이 100개 있는데 한 화면에 글 100개가 있으면 안된다
-> 따라서 한 화면에 글 몇개가 있어야 되는지 우리가 정해줘야 한다

ch13_board를 복붙한 ch13_pagingBoard는 컨텍스트루트가 같다
따라서 ch13_pagingBoard 프로젝트 파일 오른쪽 버튼 누르고 properties 들어가서
Web Project Settings 들어가서 컨텍스트루트를 바꾼다

list.jsp?pageNum=1
-> 최신글 1등 부터 10등 까지
-> 등수 대로 데이터 베이스에서 글 뽑아내는 것은 Top-N SQL문 필요!!!

list.jsp?pageNum=2
-> 최신글 11등 부터 20등 까지

list.jsp?pageNum=3
-> 최신글 21등 부터 30등 까지

새로운 용어 : 블럭 사이즈
블럭사이즈가 5이면
밑에 페이지가 5까지 나오고 옆에는 다음이라고 떠야함
블럭사이즈가 10이면
밑에 페이지가 10까지 나오고 옆에는 다음이라고 떠야함

<2,3교시>
페이지 사이즈 (pageSize=10)  -> 한 페이지에 글 10개만 나오기
블럭 사이즈 (blockSize=10)  -> 밑에 나오는 페이지 수가 10개

공식화를 시키자!
공식은 0607_12.pagingreply.xlsx 파일을 참고!!!

1) 쿼리를 Top-N 구문으로 바꾼다
-> 페이징을 위한 top-N 구문 (startRow~endRow까지 출력할 top-N)
SELECT * FROM BOARD ORDER BY REF DESC, RE_STEP; -- 1단계

SELECT ROWNUM RN, A.*
    FROM (SELECT * FROM BOARD ORDER BY REF DESC, RE_STEP) A; -- 2단계

SELECT *
    FROM(SELECT ROWNUM RN, A.*
            FROM (SELECT * FROM BOARD ORDER BY REF DESC, RE_STEP) A)
    WHERE RN BETWEEN 11 AND 20; -- 최종 TOP-N구문

2) BoardDao의 listBoard() 함수를 수정한다 (수업에서는 따로 추가해줬다)
-> 매개변수로 int startRow와 int endRow를 받는다

3) list.jsp에서 listBoard()를 호출해서 실험해본다!
-> 호출하기 전 작업이 필요하다
-> 위에서 언급한 공식을 사용한다
-> 우선 final int PAGESIZE = 10, BLOCKSIZE = 10; 를 작성
-> request.getParameter()로 "pageNum"을 받는다
-> if문을 통해서 pageNum을 파라미터 값으로 받지 못했을 때 pageNum이 "1"이 되도록 만든다
-> String인 pageNum을 int로 바꿔서 int currentPage 변수에 넣는다
-> 변수 currentPage를 가지고 startRow( (페이지번호 - 1) * 페이지당 갯수+ 1 )/ endRow( 시작번호 + 페이지당갯수 - 1 ) 공식을 사용한다
-> listBoard() 함수 안에다 매개변수로 startRow와 endRow를 넣는다!!! 
-> list.jsp를 실행시키고 주소창에 list.jsp?pageNum=2와 같이 작성하면 최신글 11등 부터 20등까지 출력된 페이지가 나온다

4) list.jsp 아래측에 뿌려질 페이지 번호들 셋팅 
-> list.jsp의 <table> 태그 밑에 class가 paging인 <div> 태그를 작성
-> <div> 태그 밑에 int 변수 pageCnt에 페이지 수 공식을 사용하여 담는다
-> int 변수 startPage( ((현재페이지 -1)/블록당페이지수)*블록당페이지수 +1 )와 endPage( 시작페이지 + 블록당페이지 수 -1 )에 공식을 사용해서 담는다
-> 그러나 endPage를 if문을 통해서 수정해야한다
-> endPage가 pageCnt 보다 크면 endPage를 pageCnt로 바꾼다
-> 이전 표시가 나올 경우가 있는데 이는 if문 안에 조건으로 startPage > BLOCKSIZE 넣고
     out.println("[ <a href='list.jsp?pageNum="+(startPage-1)+"'>이전</a> ] "); 를 작성한다
-> 블럭1 (1~10) / 블럭2 (11~20) / 블럭3 (21~30)
-> 1,2,3,4,5,6,7,8,9,10 페이지 뿌려주기 (for문을 돌린다 그리고 <a>태그를 포함해서 돌려줘야 함)
       for(int i=startPage ; i<=endPage ; i++){
    	if(i==currentPage){ // 페이지 수만 출력 (빨간색 글씨로) <b>2</b>
    		out.println("[ <b>"+i+"</b> ] ");
    	}else{ // a 태그를 포함한 페이지 수 출력 <a href='list.jsp?pageNum=10'>10</a>
    		out.println("[ <a href='list.jsp?pageNum="+i+"'>"+i+"</a> ] ");
    	}
    }
-> 다음 표시가 나올 경우가 있는데 이는 if문 안에 조건으로 endPage < pageCnt 넣고
     out.println("[ <a href='list.jsp?pageNum="+ (endPage+1)+"'>다음</a> ] "); 를 작성한다

5) 모든 페이지 전환시 pageNum을 파라미터로 전달
-> list.jsp에서 
     out.println("<a href='"+conPath+"/board/content.jsp?num=" + dto.getNum()"'>" + dto.getSubject()+"</a></td>");를
-> out.println("<a href='"+conPath+"/board/content.jsp?num=" + dto.getNum()+"&pageNum=" + pageNum +"'>" + dto.getSubject()+"</a></td>");로 바꿔준다

-> content.jsp로 넘어가서 getParameter()로 "pageNum"을 받아 String 변수 pageNum에 담는다
-> 수정, 삭제, 목록 버튼에
     <button onclick="location.href='updateForm.jsp?num=<%=num%>&pageNum=<%=pageNum %>'">수정(삭제,목록)</button>로 바꿔준다

-> updateForm.jsp로 넘어가서 getParameter()로 "pageNum"을 받는다
-> 그리고 <form> 태그 안에 name이 pageNum이고 type이 hidden인 <input> 태그를 넣는다
-> button 타입(목록)의 <input> 태그 안에 onclick="location.href='list.jsp?pageNum=<%=pageNum %>'"로 수정한다
-> updatePro.jsp로 넘어가서 getParameter()로 "pageNum"을 받는다
-> 그리고 location.href='list.jsp?pageNum=<%=pageNum%>'; 로 수정

-> deletForm.jsp로 넘어가서 getParameter()로 "pageNum"을 받는다
-> 그리고 <form> 태그 안에 name이 pageNum이고 type이 hidden인 <input> 태그를 넣는다
-> deletePro.jsp로 넘어가서 getParameter()로 "pageNum"을 받는다    
-> 그리고 location.href='list.jsp?pageNum=<%=pageNum%>'; 로 수정

<4,5,6교시>
- 답변 기능 추가하기 -
-> ch13_pagingBoard를 복붙해서 ch13_replyPagingBoard 프로젝트 파일을 새로 만들고 컨텍스트루트를 바꿔준다!

1) 답변글을 처리하는 쿼리를 작성한다 (원글은 들여쓰기 x / 첫번째 답변글은 원글 바로 밑에 / 두번째 답변글은 첫번째 답변글 위에)
-- 답변글 처리 방법
(1) 원글 150번 글 입력 : 글번호와 REF가 같고, RE_STEP=0, RE_INDENT=0
INSERT INTO BOARD (NUM, WRITER, SUBJECT, CONTENT, EMAIL, PW, REF, RE_STEP, RE_INDENT, IP)
    VALUES (150, '원글자', '글150', '본문', 'WON@W.COM', '1', 150, 0, 0, '192.168.1.1');

(2) 답변글 저장전 해야할 작업(엑셀의 a SETP)
UPDATE BOARD SET RE_STEP = RE_STEP+1 WHERE REF=150 AND RE_STEP>0;
-- 150번글의 첫번째 답변글 : 답변글의 REF는 원글의 REF를 따르고, 답변글의 RE_STEP = 원글의 RE_STEP+1, 답변글의 RE_INDENT = 원글의 RE_INDENT+1
INSERT INTO BOARD (NUM, WRITER, SUBJECT, CONTENT, EMAIL, PW, REF, RE_STEP, RE_INDENT, IP)
    VALUES (151, '답변자', '글150-1', '본문', 'W@W.COM', '1', 150, 1, 1, '192.168.1.12');

(3) 답변글 저장전 해야할 작업(엑셀의 a SETP)
UPDATE BOARD SET RE_STEP = RE_STEP+1 WHERE REF=150 AND RE_STEP>0;
-- 150번글의 두번째 답변글 : 답변글의 REF는 원글의 REF를 따르고, 답변글의 RE_STEP = 원글의 RE_STEP+1, 답변글의 RE_INDENT = 원글의 RE_INDENT+1
INSERT INTO BOARD (NUM, WRITER, SUBJECT, CONTENT, EMAIL, PW, REF, RE_STEP, RE_INDENT, IP)
    VALUES (152, '답변자2', '글150-2', '본문', 'W@W.COM', '1', 150, 1, 1, '192.168.1.12');

RE_STEP => 출력순서
RE_INDENT => 들여쓰기 정도

2) list.jsp에서 '답변이면 들여쓰기를 해라' 를 구현 (= 답변글 들여쓰기 - re.gif출력)
-> 조회수가 10초과시 hot.gif 이미지 출력 if문 위에다가 
     if(dto.getRe_indent() > 0){
     	int width = dto.getRe_indent() * 20;
    	out.println("<img src='../img/re.gif' width='"+width+"' height='10'>");
    }
    를 작성

3) 답변글의 답변글 구현
<예시>
-> 원글(150번)
     	답변글(152번)
                 	                답변글(152-1번)
                 답변글(151번)
     원글(149번)
-> 해당 쿼리문 추가
150번 원글의 답변글인 152번글의 답변글 (=> 152번글의 답변글)
SELECT * FROM BOARD WHERE NUM=152; -- 152번글이 150번의 답변글이지만 원글이라고 생각해라
    -- a STEP
    UPDATE BOARD SET RE_STEP=RE_STEP+1 WHERE REF=150 AND RE_STEP>1;
    -- 답변글 저장 : 원글 152번의 REF, RE_STEP+1, RE_INDENT+1
    INSERT INTO BOARD (NUM, WRITER, SUBJECT, CONTENT, EMAIL, PW, REF, RE_STEP, RE_INDENT, IP)
        VALUES (153, '답변글의답변자', '글152-1', '본문', NULL, '1', 150, 2, 2, '192.168.1.1');

4) BoardDao에 <답변글 저장전 ⓐ 스텝 쿼리문>과 <답변글 저장하는 쿼리문>을 사용해서 2가지의 메소드를 추가한다
-> private void preReplyStepA(int ref, int re_step) / public int reply(BoardDto dto)
-> public int reply(BoardDto dto)에서 sql문 후에 
     preReplyStepA를 호출한다 -> 예시 ; preReplyStepA(dto.getRef(), dto.getRe_step());

5) 답변글 버튼이 있는 content.jsp로 넘어가서
    <button onclick="location.href='writeForm.jsp?num=<%=num %>&pageNum=<%=pageNum %>'">답변</button>
    로 수정하면 (num을 파라미터로 주면) writeForm.jsp에서는 답변글쓰기로 인식한다

6) writeForm.jsp로 넘어가서
    num, ref, re_step, re_indent를 0으로 초기화
    DTO 객체 생성
    getParameter()로 "pageNum"을 받아옴
    if문 안에 답변글인지 원글인지를 판단하기 위해 조건으로 request.getParameter("num")!=null를 작성하고
    변수 num을 ing형으로 바꾼 다음
    dto에 매개변수로 num을 받은 getBoardOneline을 담는다
    <form> 태그 밑에 <input> 태그로 writePro.jsp로 넘기기 위해 작성한다
    -> <input type="hidden" name="pageNum" value="<%=pageNum %>">
         <input type="hidden" name="num" value="<%=num %>">
         <input type="hidden" name="ref" value="<%=dto.getRef() %>">
         <input type="hidden" name="re_step" value="<%=dto.getRe_step() %>">
         <input type="hidden" name="re_indent" value="<%=dto.getRe_indent() %>"> 
    버튼타입의 <input> 태그를  <input type="button" value="목록" class="btn" onclick="location.href='list.jsp?pageNum=<%=pageNum%>'">로 수정

7) writePro.jsp로 넘어가서
   
    
    
   
    	
